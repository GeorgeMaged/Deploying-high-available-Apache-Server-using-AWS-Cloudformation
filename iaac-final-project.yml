Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.

    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

    VPCIDR:
      Description: CIDR Block of the VPC
      Type: String
      Default: 10.0.0.0/16

    PrvSub1CIDR:
      Description: CIDR Block of the first private subnet
      Type: String
      Default: 10.0.0.0/24

    PubSub1CIDR:
      Description: CIDR Block of the first public subnet
      Type: String
      Default: 10.0.1.0/24

    PrvSub2CIDR:
      Description: CIDR Block of the second private subnet
      Type: String
      Default: 10.0.2.0/24

    PubSub2CIDR:
      Description: CIDR Block of the second public subnet
      Type: String
      Default: 10.0.3.0/24


Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
 # ProfileWithRolesForOurApp:
  #  Type: AWS::IAM::InstanceProfile
  #  Properties: 
   #   Roles:
   #     - UdacityS3ReadOnlyEC2

  VPC:
    Type: AWS::EC2::VPC
    Properties:
       CidrBlock: !Ref VPCIDR
       EnableDnsSupport: true
       EnableDnsHostnames: true
       Tags: 
       - Key: Name 
         Value: !Ref EnvironmentName

  InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName
            
  InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC                   

  PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PubSub1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PubSub2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrvSub1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrvSub2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2) 
                  

  NatGate1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc

  NatGate2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

  NatGate1: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NatGate1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

  NatGate2: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGate2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2                      

  PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGate1

  PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGate2

  PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2          
Outputs: 
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.
    
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${EnvironmentName}-VPC"

  PublicSubnet1:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${EnvironmentName}-Public-Subnet-1"

  PublicSubnet2:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${EnvironmentName}-Public-Subnet-2"

  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${EnvironmentName}-Private-Subnet-1"

  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${EnvironmentName}-Private-Subnet-2"

  PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PUB-NETS

  PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-NETS    
# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html
